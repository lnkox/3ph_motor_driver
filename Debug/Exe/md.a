;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 08.06.2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega48
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;//початок Налаштування
;#define DEAD_TIME_HALF      2  //Мертвий час (1 = 0.26 мкс)
;
;
;//Кінець налаштувань
;
;
;#define SINE_TABLE_LENGTH   192 // Кількість значень в таблиці синусів
;
;#define DIRECTION_FORWARD       0 // Константа руху вперед
;#define DIRECTION_REVERSE       1 // Константа руху назад
;
;#define MODE_STOP      0 // режим "Зупинений"
;#define MODE_RUN       1 // режим "Робота"
;#define MODE_BRAKE     2 // режим "Гальмування"
;
;#define ERROR_NO            0 // Помилки відчсутні
;#define ERROR_POWER         1 // Відсутність живлення
;#define ERROR_OVERVOLTAGE   2 // Перенапруга на конденсаторі
;#define ERROR_OVERLOAD      3 // Перевантаження по струму
;#define ERROR_DRIVERTEMP    4 // Перегрів драйвера
;#define ERROR_MOTORTEMP     5 // Перегрів Двигуна
;
;// Роспіновка
;#define FORWARD_BUT     PIND.1  //  Кнопка запуску вперед
;#define STOP_BUT        PIND.0  //  Кнопка зупинки
;#define REVERSE_BUT     PINC.5  //  Кнопка запуску назад
;
;#define POWER_SENS      PIND.2  // Пропажа сети - нормальное состояние лог.0, при лог.1 - сделать стоп привода, после по ...
;#define CAP_VOLTAGE     3       //ADC3 - пренапряжение силовой части ( больше +340В).С силового конденсатора через делит ...
;#define DRIVER_TEMP     4       //ADC4 - измерение перегрева силовой части. Согласно таблицам расчитать работы терморези ...
;#define NORMAL_LED      PORTC.2 // - светодиод индикации работы - начинает гореть спустя 4 секунды после (включения PD2) ...
;#define ERROR_LED       PORTC.1 // - светодиод индикации аварии
;#define OVERLOAD        PINB.5  // - сверхток - лог.0 (подтянут через 10К к 5В) - при подаче лог.0 на этот вывод - резко ...
;#define OVER_MOTORTEMP  PIND.2  // - Перегрев двигателя - нормальное состояние лог.0 при появлении лог.1. сделать стоп п ...
;
;// Кінець роспіновки
;
;#include <mega48.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $00000009 VOL: 0
	#endif
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
;
;#include <delay.h>
;#include <md.h>
;
;void InsertDeadband(char compareValue, char * compareHighPtr, char * compareLowPtr); //Функція вставки метрвого часу
;void gen_next_sinpos(void); // Функція генерації наступного значення ШІМ
;void off_pwm(void); // Відключення всіх виходів на транзистори
;void sys_timer(void); // Системний таймер -100 Гц
;// Declare your global variables here
;char mode=0;
;int sinpos=0;
;int direct=0;
;float amplitude=0;
;int sinseg_period=0,sinseg=0;
;int sys_timer_cnt=0;
;
;long map(long x, long in_min, long in_max, long out_min, long out_max)
; 0000 004E {

	.CSEG
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 004F   return ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
;PCODE: $0000000E VOL: 0
;	x -> Y+16
;	in_min -> Y+12
;	in_max -> Y+8
;	out_min -> Y+4
;	out_max -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0050 }
;PCODE: $00000022 VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0053 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0054      sinseg++;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0055      if (sinseg>=sinseg_period)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0056      {
; 0000 0057         sinseg=0;
;PCODE: $0000002B VOL: 0
; 0000 0058         if (amplitude==0 || mode==0){off_pwm();}
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0059         if (mode==1 && amplitude>0 ) {gen_next_sinpos();}
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005A      }
;PCODE: $00000041 VOL: 0
; 0000 005B     sys_timer_cnt++;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 005C     if (sys_timer_cnt>138) {sys_timer_cnt=0; sys_timer();}
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005D }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;void sys_timer(void)
; 0000 005F {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0060 
; 0000 0061 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;void gen_next_sinpos(void)
; 0000 0063 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0064     char tempU,tempV,tempW;
; 0000 0065     char compareHigh, compareLow;
; 0000 0066     int tsp;
; 0000 0067     sinpos++;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;	tempU -> R17
;	tempV -> R16
;	tempW -> R19
;	compareHigh -> R18
;	compareLow -> R21
;	tsp -> Y+6
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0068     if (sinpos==SINE_TABLE_LENGTH) sinpos=0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0069     tsp=sinpos*3;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 006A     tempU=sineTable[tsp]*amplitude;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006B     if (direct == DIRECTION_FORWARD)
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 006C     {
; 0000 006D         tempV = sineTable[tsp+1]*amplitude;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 006E         tempW = sineTable[tsp+2]*amplitude;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006F     }
; 0000 0070     else
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0071     {
; 0000 0072         tempW = sineTable[tsp+1]*amplitude;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0073         tempV = sineTable[tsp+2]*amplitude;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0074     }
;PCODE: $00000098 VOL: 0
; 0000 0075 
; 0000 0076     InsertDeadband(tempU, &compareHigh, &compareLow);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0077     OCR0A = compareHigh;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0078     OCR0B = compareLow;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0079 
; 0000 007A     InsertDeadband(tempV, &compareHigh, &compareLow);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 007B     OCR1AL = compareHigh;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007C     OCR1BL = compareLow;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 007D 
; 0000 007E     InsertDeadband(tempW, &compareHigh, &compareLow);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 007F     OCR2A = compareHigh;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0080     OCR2B = compareLow;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0081 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;
;void InsertDeadband(char compareValue, char * compareHighPtr, char * compareLowPtr)   //вставка метвого часу
; 0000 0084 {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0085   if (compareValue <= DEAD_TIME_HALF)
;PCODE: $000000C6 VOL: 0
;	compareValue -> Y+4
;	*compareHighPtr -> Y+2
;	*compareLowPtr -> Y+0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0086   {
; 0000 0087     *compareHighPtr = 0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0088     *compareLowPtr = compareValue;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0089   }
; 0000 008A   else if (compareValue >= (0xff - DEAD_TIME_HALF))
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 008B   {
; 0000 008C     *compareHighPtr = 0xff - (2 * DEAD_TIME_HALF);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 008D     *compareLowPtr = 0xff;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008E   }
; 0000 008F   else
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0090   {
; 0000 0091     *compareHighPtr = compareValue - DEAD_TIME_HALF;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0092     *compareLowPtr = compareValue + DEAD_TIME_HALF;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0093   }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0094 }
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;
;void set_freq(int freq)
; 0000 0097 {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0098    float amp;
; 0000 0099    if (freq==0) {amplitude=0;sinseg_period=124; return;}
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;	freq -> Y+4
;	amp -> Y+0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 009A    sinseg_period=124/freq;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 009B    amp=map(freq,1,60,30,100);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 009C    amplitude=amp/100;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 009D 
; 0000 009E }
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;void off_pwm(void)
; 0000 00A0 {
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00A1     OCR0A=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00A2     OCR0B=0xFF;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00A3     OCR1AL=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00A4     OCR1BL=0xFF;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00A5     OCR2A=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00A6     OCR2B=0xFF;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00A7 }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;void check_error(void)
; 0000 00A9 {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00AA //POWER_SENS
; 0000 00AB // CAP_VOLTAGE
; 0000 00AC //  DRIVER_TEMP
; 0000 00AD //   NORMAL_LED
; 0000 00AE //    ERROR_LED
; 0000 00AF //    OVERLOAD
; 0000 00B0 //     OVER_MOTORTEMP
; 0000 00B1 }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 00B7 {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00B8 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000126 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00B9 // Delay needed for the stabilization of the ADC input voltage
; 0000 00BA delay_us(10);
;PCODE: $0000012A VOL: 0
; 0000 00BB // Start the AD conversion
; 0000 00BC ADCSRA|=(1<<ADSC);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00BD // Wait for the AD conversion to complete
; 0000 00BE while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00BF ADCSRA|=(1<<ADIF);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00C0 return ADCW;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00C1 }
;PCODE: $0000013A VOL: 0
;
;void main(void)
; 0000 00C4 {
;PCODE: $0000013B VOL: 0
; 0000 00C5 // Declare your local variables here
; 0000 00C6 int adcv=0;
; 0000 00C7 // Crystal Oscillator division factor: 1
; 0000 00C8 #pragma optsize-
; 0000 00C9 CLKPR=(1<<CLKPCE);
;	adcv -> R16,R17
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00CA CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00CB #ifdef _OPTIMIZE_SIZE_
; 0000 00CC #pragma optsize+
; 0000 00CD #endif
; 0000 00CE 
; 0000 00CF // Input/Output Ports initialization
; 0000 00D0 // Port B initialization
; 0000 00D1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=In
; 0000 00D2 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00D3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=T
; 0000 00D4 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00D5 
; 0000 00D6 // Port C initialization
; 0000 00D7 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=out Bit1=out Bit0=In
; 0000 00D8 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (0<<DDC0);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00D9 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00DA PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00DB 
; 0000 00DC // Port D initialization
; 0000 00DD // Function: Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 00DE DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00DF // State: Bit7=T Bit6=0 Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 00E0 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00E1 
; 0000 00E2 // Timer/Counter 0 initialization
; 0000 00E3 // Clock source: System Clock
; 0000 00E4 // Clock value: 8000,000 kHz
; 0000 00E5 // Mode: Phase correct PWM top=0xFF
; 0000 00E6 // OC0A output: Non-Inverted PWM
; 0000 00E7 // OC0B output: Inverted PWM
; 0000 00E8 // Timer Period: 0,06375 ms
; 0000 00E9 // Output Pulse(s):
; 0000 00EA // OC0A Period: 0,06375 ms Width: 0 us// OC0B Period: 0,06375 ms Width: 0,06375 ms
; 0000 00EB TCCR0A=(1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (1<<COM0B0) | (0<<WGM01) | (1<<WGM00);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00EC TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00ED TCNT0=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00EE OCR0A=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00EF OCR0B=0xFF;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00F0 
; 0000 00F1 // Timer/Counter 1 initialization
; 0000 00F2 // Clock source: System Clock
; 0000 00F3 // Clock value: 8000,000 kHz
; 0000 00F4 // Mode: Ph. correct PWM top=0x00FF
; 0000 00F5 // OC1A output: Non-Inverted PWM
; 0000 00F6 // OC1B output: Inverted PWM
; 0000 00F7 // Noise Canceler: Off
; 0000 00F8 // Input Capture on Falling Edge
; 0000 00F9 // Timer Period: 0,06375 ms
; 0000 00FA // Output Pulse(s):
; 0000 00FB // OC1A Period: 0,06375 ms Width: 0 us// OC1B Period: 0,06375 ms Width: 0,06375 ms
; 0000 00FC // Timer1 Overflow Interrupt: On
; 0000 00FD // Input Capture Interrupt: Off
; 0000 00FE // Compare A Match Interrupt: Off
; 0000 00FF // Compare B Match Interrupt: Off
; 0000 0100 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0101 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0102 TCNT1H=0x00;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0103 TCNT1L=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0104 ICR1H=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0105 ICR1L=0x00;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0106 OCR1AH=0x00;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0107 OCR1AL=0x00;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0108 OCR1BH=0x00;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0109 OCR1BL=0xFF;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 010A 
; 0000 010B // Timer/Counter 2 initialization
; 0000 010C // Clock source: System Clock
; 0000 010D // Clock value: 8000,000 kHz
; 0000 010E // Mode: Phase correct PWM top=0xFF
; 0000 010F // OC2A output: Non-Inverted PWM
; 0000 0110 // OC2B output: Inverted PWM
; 0000 0111 // Timer Period: 0,06375 ms
; 0000 0112 // Output Pulse(s):
; 0000 0113 // OC2A Period: 0,06375 ms Width: 0 us// OC2B Period: 0,06375 ms Width: 0,06375 ms
; 0000 0114 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0115 TCCR2A=(1<<COM2A1) | (0<<COM2A0) | (1<<COM2B1) | (1<<COM2B0) | (0<<WGM21) | (1<<WGM20);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0116 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0117 TCNT2=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0118 OCR2A=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0119 OCR2B=0xFF;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 011A 
; 0000 011B // Timer/Counter 0 Interrupt(s) initialization
; 0000 011C TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 011D 
; 0000 011E // Timer/Counter 1 Interrupt(s) initialization
; 0000 011F TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0120 
; 0000 0121 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0122 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0123 
; 0000 0124 // External Interrupt(s) initialization
; 0000 0125 // INT0: Off
; 0000 0126 // INT1: Off
; 0000 0127 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0128 // Interrupt on any change on pins PCINT8-14: Off
; 0000 0129 // Interrupt on any change on pins PCINT16-23: Off
; 0000 012A EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 012B EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 012C PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 012D 
; 0000 012E // USART initialization
; 0000 012F // USART disabled
; 0000 0130 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0131 
; 0000 0132 // Analog Comparator initialization
; 0000 0133 // Analog Comparator: Off
; 0000 0134 // The Analog Comparator's positive input is
; 0000 0135 // connected to the AIN0 pin
; 0000 0136 // The Analog Comparator's negative input is
; 0000 0137 // connected to the AIN1 pin
; 0000 0138 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0139 // Digital input buffer on AIN0: On
; 0000 013A // Digital input buffer on AIN1: On
; 0000 013B DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 013C 
; 0000 013D // ADC initialization
; 0000 013E // ADC Clock frequency: 62,500 kHz
; 0000 013F // ADC Voltage Reference: AREF pin
; 0000 0140 // ADC Auto Trigger Source: ADC Stopped
; 0000 0141 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 0142 // ADC4: On, ADC5: On
; 0000 0143 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0144 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0145 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0146 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0147 
; 0000 0148 // SPI initialization
; 0000 0149 // SPI disabled
; 0000 014A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 014B 
; 0000 014C // TWI initialization
; 0000 014D // TWI disabled
; 0000 014E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 014F 
; 0000 0150 // Global enable interrupts
; 0000 0151 TCNT0=0;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0152 TCNT1L=2;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0153 TCNT2=5;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0154 #asm("sei")
;PCODE: $0000019C VOL: 0
	sei
;PCODE: $0000019D VOL: 0
; 0000 0155       set_freq(50);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0156       mode=1;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0157 while (1)
;PCODE: $000001A3 VOL: 0
; 0000 0158       {
; 0000 0159       // Place your code here
; 0000 015A 
; 0000 015B 
; 0000 015C       }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 015D }
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
