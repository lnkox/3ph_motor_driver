;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 08.06.2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega48
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*******************************************************/
;//початок Налаштування
;#define DEAD_TIME_HALF      2   //Мертвий час (1 = 0.26 мкс)
;#define ACCELERATION        40  //Прискорення  (Гц/сек)
;#define NORM_VOLTAGE        512 // Нормальне значення робочої напруги в одиницях АЦП (Макс:1023)
;#define MAX_BRAKE_VOLTAGE   562 // Максимальне допустипе значення напруги при гальмуванні в одиницях АЦП (Макс:1023)
;#define CRYTYCAL_VOLTAGE    594 // Критичне значення напруги в одиницях АЦП (Макс:1023)
;#define BRAKE_PERIOD        100 // Період гальмування двигуна (1/100 сек)
;#define NORM_TEMP_DRIVER    200 // Нормальне значення температури драйвера в одиницях АЦП (Макс:1023)
;#define MAX_TEMP_DRIVER     300 // Максимальне допустипе значення температури драйвера в одиницях АЦП (Макс:1023)
;
;
;//Кінець налаштувань
;
;
;#define SINE_TABLE_LENGTH   192 // Кількість значень в таблиці синусів
;
;#define DIRECTION_FORWARD       0 // Константа руху вперед
;#define DIRECTION_REVERSE       1 // Константа руху назад
;
;#define MODE_STOP      0 // режим "Зупинений"
;#define MODE_RUN       1 // режим "Робота"
;#define MODE_BRAKE     2 // режим "Гальмування"
;
;#define ERROR_NO            0 // Помилки відчсутні
;#define ERROR_POWER         1 // Відсутність живлення
;#define ERROR_OVERVOLTAGE   2 // Перенапруга на конденсаторі
;#define ERROR_OVERLOAD      3 // Перевантаження по струму
;#define ERROR_DRIVERTEMP    4 // Перегрів драйвера
;#define ERROR_MOTORTEMP     5 // Перегрів Двигуна
;
;// Роспіновка
;#define FORWARD_BUT     PIND.1  //  Кнопка запуску вперед
;#define STOP_BUT        PIND.0  //  Кнопка зупинки
;#define REVERSE_BUT     PINC.0  //  Кнопка запуску назад
;
;#define POWER_SENS      PIND.2  // Пропажа сети - нормальное состояние лог.0, при лог.1 - сделать стоп привода, после по ...
;#define CAP_VOLTAGE     3       //ADC3 - пренапряжение силовой части ( больше +340В).С силового конденсатора через делит ...
;#define DRIVER_TEMP     4       //ADC4 - измерение перегрева силовой части. Согласно таблицам расчитать работы терморези ...
;#define FREQUENCY_ADC   7       //ADC7 - регулировка частоты
;#define NORMAL_LED      PORTC.1 // - светодиод индикации работы - начинает гореть спустя 4 секунды после (включения PD2) ...
;#define ERROR_LED       PORTC.2 // - светодиод индикации аварии
;#define OVER_LOAD       PINB.4  // - сверхток - лог.0 (подтянут через 10К к 5В) - при подаче лог.0 на этот вывод - резко ...
;#define OVER_MOTORTEMP  PIND.4  // - Перегрев двигателя - нормальное состояние лог.0 при появлении лог.1. сделать стоп п ...
;
;// Кінець роспіновки
;
;#include <mega48pa.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <md.h>
;
;void InsertDeadband(char compareValue, char * compareHighPtr, char * compareLowPtr); //Функція вставки метрвого часу
;void gen_next_sinpos(void); // Функція генерації наступного значення ШІМ
;void off_pwm(void); // Відключення всіх виходів на транзистори
;void sys_timer(void); // Системний таймер -100 Гц
;void set_freq(int fr); // Встановлення частоти синусоїди
;unsigned int read_adc(unsigned char adc_input); // Функйція отримання значення АЦП
;void check_button(); // Перевірка натисення кнопок
;// Declare your global variables here
;volatile int mode=0;
;volatile int direct=0;
;volatile float amplitude=0;
;volatile int sinseg_period=124,sinseg=0;

	.DSEG
;volatile int sys_timer_cnt=0;
;volatile int accel_cnt=0;
;volatile int cur_freq=0,freq=0;
;volatile int error_led_cnt=0,error_led_period=0,error=0;
;volatile int overload_state=0,overvoltage_state=0,crytycal_voltage=0;
;volatile int brake_cnt=0;
;volatile char sinU=0,sinV=42,sinW=85;
;
;#pragma warn-
;eeprom  int driver_temp_state;
;#pragma warn+
;long map(long x, long in_min, long in_max, long out_min, long out_max)
; 0000 0061 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0062   return ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
;PCODE: $0000000F VOL: 0
;	x -> Y+16
;	in_min -> Y+12
;	in_max -> Y+8
;	out_min -> Y+4
;	out_max -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0063 }
;PCODE: $00000023 VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0066 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0067 
; 0000 0068 //     if (OVER_LOAD==0 ) {off_pwm(); mode=MODE_STOP;}// Постійна перевірка на перевантаження по струму
; 0000 0069    NORMAL_LED=!NORMAL_LED;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 006A     NORMAL_LED=!NORMAL_LED;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 006B //  sinseg++;
; 0000 006C //    if (sinseg>=sinseg_period)
; 0000 006D // {
; 0000 006E //    sinseg=0;
; 0000 006F //
; 0000 0070 //   if (mode>0 && overvoltage_state==0)
; 0000 0071 //   {
; 0000 0072 //       gen_next_sinpos();
; 0000 0073 //   }
; 0000 0074 //    else
; 0000 0075 //    {
; 0000 0076 //        off_pwm();
; 0000 0077 //    }
; 0000 0078 //   }
; 0000 0079 //    sys_timer_cnt++;
; 0000 007A //    if (sys_timer_cnt>138) {sys_timer_cnt=0; sys_timer();}
; 0000 007B 
; 0000 007C }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;void sys_timer(void)
; 0000 007E {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 007F    if (mode>0)
;PCODE: $0000003F VOL: 1
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0080    {
; 0000 0081         if(cur_freq<freq || cur_freq>freq)
;PCODE: $00000042 VOL: 1
;PCODE: $00000043 VOL: 1
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 1
;PCODE: $00000047 VOL: 1
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0082         {
; 0000 0083             accel_cnt=accel_cnt+ACCELERATION;
;PCODE: $0000004C VOL: 1
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 1
; 0000 0084             if (accel_cnt>99)
;PCODE: $0000004F VOL: 1
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0085             {
; 0000 0086                 accel_cnt=0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 1
; 0000 0087                 if (cur_freq<freq) {cur_freq++;} else {cur_freq--;}
;PCODE: $00000054 VOL: 1
;PCODE: $00000055 VOL: 1
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 1
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 1
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0088                 set_freq(cur_freq);
;PCODE: $00000063 VOL: 1
;PCODE: $00000064 VOL: 0
; 0000 0089             }
; 0000 008A         }
;PCODE: $00000065 VOL: 0
; 0000 008B          if (mode==MODE_BRAKE)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 1
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 008C         {
; 0000 008D             freq=1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 1
; 0000 008E             if (cur_freq==1)  brake_cnt++;
;PCODE: $0000006C VOL: 1
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 1
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 008F 
; 0000 0090             if (brake_cnt>BRAKE_PERIOD) {brake_cnt=0;mode=MODE_STOP;off_pwm();}
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 1
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 1
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 1
;PCODE: $0000007B VOL: 0
; 0000 0091         }
;PCODE: $0000007C VOL: 0
; 0000 0092         else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0093         {
; 0000 0094             freq=map( read_adc(FREQUENCY_ADC),0,1023,1,60);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 1
; 0000 0095         }
;PCODE: $0000008C VOL: 0
; 0000 0096 
; 0000 0097 
; 0000 0098    }
; 0000 0099    else
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 009A    {
; 0000 009B         if (error>0)
;PCODE: $0000008F VOL: 1
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 009C         {
; 0000 009D              error_led_cnt++;
;PCODE: $00000092 VOL: 1
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 009E              if (error_led_cnt>error_led_period)
;PCODE: $00000096 VOL: 1
;PCODE: $00000097 VOL: 1
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 009F              {
; 0000 00A0                 ERROR_LED=!ERROR_LED;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00A1                 error_led_cnt=0;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 1
; 0000 00A2              }
; 0000 00A3         }
;PCODE: $000000A6 VOL: 0
; 0000 00A4         if (mode==MODE_STOP  && error==ERROR_NO)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 1
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 1
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00A5         {
; 0000 00A6            NORMAL_LED=1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00A7         }
; 0000 00A8 
; 0000 00A9 
; 0000 00AA    }
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00AB 
; 0000 00AC    check_button();
;PCODE: $000000B6 VOL: 0
; 0000 00AD }
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;void check_button()
; 0000 00AF {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B0 
; 0000 00B1     if (mode==MODE_STOP)
;PCODE: $000000BB VOL: 1
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B2     {
; 0000 00B3         if(REVERSE_BUT==0) {mode=MODE_RUN;direct=DIRECTION_REVERSE;}
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 1
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 1
; 0000 00B4         if(FORWARD_BUT==0) {mode=MODE_RUN;direct=DIRECTION_FORWARD;}
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 1
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 1
; 0000 00B5     }
;PCODE: $000000CD VOL: 0
; 0000 00B6     if(STOP_BUT==0)
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00B7     {
; 0000 00B8         if (mode==MODE_STOP)
;PCODE: $000000D2 VOL: 1
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B9         {
; 0000 00BA             overload_state=0;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 1
; 0000 00BB             crytycal_voltage=0;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 1
; 0000 00BC         }
; 0000 00BD         else
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00BE         {
; 0000 00BF             mode=MODE_BRAKE;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 1
; 0000 00C0         }
;PCODE: $000000DD VOL: 0
; 0000 00C1     }
; 0000 00C2 }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;void gen_next_sinpos(void)
; 0000 00C4 {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00C5     char tempU,tempV,tempW;
; 0000 00C6     char compareHigh, compareLow;
; 0000 00C7     sinU++;sinV++;sinW++;
;PCODE: $000000E3 VOL: 0
;	tempU -> R17
;	tempV -> R16
;	tempW -> R19
;	compareHigh -> R18
;	compareLow -> R21
;PCODE: $000000E4 VOL: 1
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 1
;PCODE: $000000E7 VOL: 1
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 1
;PCODE: $000000EA VOL: 1
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 1
; 0000 00C8     tempU=127+(sineTable[sinU]*amplitude);
;PCODE: $000000ED VOL: 1
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 1
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00C9     if (direct == DIRECTION_FORWARD)
;PCODE: $000000F9 VOL: 1
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00CA     {
; 0000 00CB         tempV =127+(sineTable[sinV]*amplitude);
;PCODE: $000000FC VOL: 1
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 1
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00CC         tempW =127+(sineTable[sinW]*amplitude);
;PCODE: $00000108 VOL: 1
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 1
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00CD     }
; 0000 00CE     else
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00CF     {
; 0000 00D0         tempW =127+(sineTable[sinV]*amplitude);
;PCODE: $00000116 VOL: 1
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 1
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00D1         tempV =127+(sineTable[sinW]*amplitude);
;PCODE: $00000122 VOL: 1
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 1
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00D2     }
;PCODE: $0000012E VOL: 0
; 0000 00D3 
; 0000 00D4     InsertDeadband(tempU, &compareHigh, &compareLow);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00D5     OCR0A = compareHigh;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D6     OCR0B = compareLow;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00D7 
; 0000 00D8     InsertDeadband(tempV, &compareHigh, &compareLow);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00D9     OCR1AL = compareHigh;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00DA     OCR1BL = compareLow;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00DB 
; 0000 00DC     InsertDeadband(tempW, &compareHigh, &compareLow);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00DD     OCR2A = compareHigh;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00DE     OCR2B = compareLow;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00DF }
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;
;void InsertDeadband(char compareValue, char * compareHighPtr, char * compareLowPtr)   //вставка метвого часу
; 0000 00E2 {
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00E3   if (compareValue <= DEAD_TIME_HALF)
;PCODE: $0000015C VOL: 0
;	compareValue -> Y+4
;	*compareHighPtr -> Y+2
;	*compareLowPtr -> Y+0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00E4   {
; 0000 00E5     *compareHighPtr = 0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00E6     *compareLowPtr = compareValue;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00E7   }
; 0000 00E8   else if (compareValue >= (0xff - DEAD_TIME_HALF))
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00E9   {
; 0000 00EA     *compareHighPtr = 0xff - (2 * DEAD_TIME_HALF);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00EB     *compareLowPtr = 0xff;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00EC   }
; 0000 00ED   else
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00EE   {
; 0000 00EF     *compareHighPtr = compareValue - DEAD_TIME_HALF;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00F0     *compareLowPtr = compareValue + DEAD_TIME_HALF;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00F1   }
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00F2 }
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;
;void set_freq(int fr)
; 0000 00F5 {
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00F6    float amp;
; 0000 00F7    sinseg_period=62/fr;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;	fr -> Y+4
;	amp -> Y+0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 1
; 0000 00F8    amp=map(fr,1,50,30,100);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00F9    if (amp>100) amp=100;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00FA    amplitude=amp/100;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 1
; 0000 00FB }
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;void off_pwm(void)
; 0000 00FD {
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00FE     OCR0A=0x00;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00FF     OCR0B=0xFF;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0100     OCR1AL=0x00;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0101     OCR1BL=0xFF;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0102     OCR2A=0x00;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0103     OCR2B=0xFF;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0104 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;void check_error(void)
; 0000 0106 {
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0107     volatile int tmp_error=0;
; 0000 0108     volatile int capvoltage,driver_t=0;
; 0000 0109    // capvoltage=read_adc(CAP_VOLTAGE);
; 0000 010A     //POWER_SENS
; 0000 010B 
; 0000 010C    // if (capvoltage<NORM_VOLTAGE){overvoltage_state=0;}
; 0000 010D    // if (capvoltage>MAX_BRAKE_VOLTAGE) {off_pwm();overvoltage_state=1;}
; 0000 010E    // if (capvoltage>CRYTYCAL_VOLTAGE || crytycal_voltage==1) {off_pwm(); mode=MODE_STOP;crytycal_voltage=1; error_led_p ...
; 0000 010F    // driver_t=read_adc(DRIVER_TEMP);
; 0000 0110    // if (driver_t>MAX_TEMP_DRIVER || driver_temp_state==1)   {off_pwm(); mode=MODE_STOP;driver_temp_state=1; error_led_ ...
; 0000 0111    // if (driver_t<NORM_TEMP_DRIVER)  {driver_temp_state=0;}
; 0000 0112     if (OVER_LOAD==0 || overload_state==1) {off_pwm(); mode=MODE_STOP;overload_state=1; ERROR_LED=1;tmp_error=ERROR_OVER ...
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;	tmp_error -> Y+4
;	capvoltage -> Y+2
;	driver_t -> Y+0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 1
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 1
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 1
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0113    // if (OVER_MOTORTEMP==1) {mode=MODE_STOP; tmp_error=ERROR_MOTORTEMP;error_led_period=100;}
; 0000 0114     error=tmp_error;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 1
; 0000 0115     if (error==0) {ERROR_LED=0;}
;PCODE: $000001D6 VOL: 1
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0116 }
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 011C {
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 011D     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $000001E1 VOL: 0
;	adc_input -> Y+0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 011E     // Delay needed for the stabilization of the ADC input voltage
; 0000 011F     delay_us(10);
;PCODE: $000001E5 VOL: 0
; 0000 0120     // Start the AD conversion
; 0000 0121     ADCSRA|=(1<<ADSC);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0122     // Wait for the AD conversion to complete
; 0000 0123     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0124     ADCSRA|=(1<<ADIF);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0125     return ADCW;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0126 }
;PCODE: $000001F5 VOL: 0
;
;void main(void)
; 0000 0129 {
;PCODE: $000001F6 VOL: 0
; 0000 012A // Declare your local variables here
; 0000 012B // Crystal Oscillator division factor: 1
; 0000 012C #pragma optsize-
; 0000 012D CLKPR=(1<<CLKPCE);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 012E CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 012F #ifdef _OPTIMIZE_SIZE_
; 0000 0130 #pragma optsize+
; 0000 0131 #endif
; 0000 0132 
; 0000 0133 // Input/Output Ports initialization
; 0000 0134 // Port B initialization
; 0000 0135 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=In
; 0000 0136 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0137 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=T
; 0000 0138 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0139 
; 0000 013A 
; 0000 013B // Port C initialization
; 0000 013C // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=In
; 0000 013D DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (0<<DDC0);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 013E // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=T
; 0000 013F PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0140 
; 0000 0141 //
; 0000 0142 // Port D initialization
; 0000 0143 // Function: Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0144 DDRD=(0<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0145 // State: Bit7=T Bit6=0 Bit5=0 Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 0146 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0147 
; 0000 0148 // Timer/Counter 0 initialization
; 0000 0149 // Clock source: System Clock
; 0000 014A // Clock value: 8000,000 kHz
; 0000 014B // Mode: Phase correct PWM top=0xFF
; 0000 014C // OC0A output: Non-Inverted PWM
; 0000 014D // OC0B output: Inverted PWM
; 0000 014E // Timer Period: 0,06375 ms
; 0000 014F // Output Pulse(s):
; 0000 0150 // OC0A Period: 0,06375 ms Width: 0 us// OC0B Period: 0,06375 ms Width: 0,06375 ms
; 0000 0151 TCCR0A=(1<<COM0A1) | (0<<COM0A0) | (1<<COM0B1) | (1<<COM0B0) | (0<<WGM01) | (1<<WGM00);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0152 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0153 TCNT0=0x00;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0154 OCR0A=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0155 OCR0B=0xFF;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0156 
; 0000 0157 // Timer/Counter 1 initialization
; 0000 0158 // Clock source: System Clock
; 0000 0159 // Clock value: 8000,000 kHz
; 0000 015A // Mode: Ph. correct PWM top=0x00FF
; 0000 015B // OC1A output: Non-Inverted PWM
; 0000 015C // OC1B output: Inverted PWM
; 0000 015D // Noise Canceler: Off
; 0000 015E // Input Capture on Falling Edge
; 0000 015F // Timer Period: 0,06375 ms
; 0000 0160 // Output Pulse(s):
; 0000 0161 // OC1A Period: 0,06375 ms Width: 0 us// OC1B Period: 0,06375 ms Width: 0,06375 ms
; 0000 0162 // Timer1 Overflow Interrupt: On
; 0000 0163 // Input Capture Interrupt: Off
; 0000 0164 // Compare A Match Interrupt: Off
; 0000 0165 // Compare B Match Interrupt: Off
; 0000 0166 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0167 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0168 TCNT1H=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0169 TCNT1L=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 016A ICR1H=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 016B ICR1L=0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 016C OCR1AH=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 016D OCR1AL=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 016E OCR1BH=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 016F OCR1BL=0xFF;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0170 
; 0000 0171 // Timer/Counter 2 initialization
; 0000 0172 // Clock source: System Clock
; 0000 0173 // Clock value: 8000,000 kHz
; 0000 0174 // Mode: Phase correct PWM top=0xFF
; 0000 0175 // OC2A output: Non-Inverted PWM
; 0000 0176 // OC2B output: Inverted PWM
; 0000 0177 // Timer Period: 0,06375 ms
; 0000 0178 // Output Pulse(s):
; 0000 0179 // OC2A Period: 0,06375 ms Width: 0 us// OC2B Period: 0,06375 ms Width: 0,06375 ms
; 0000 017A ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 017B TCCR2A=(1<<COM2A1) | (0<<COM2A0) | (1<<COM2B1) | (1<<COM2B0) | (0<<WGM21) | (1<<WGM20);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 017C TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 017D TCNT2=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 017E OCR2A=0x00;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 017F OCR2B=0xFF;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0180 
; 0000 0181 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0182 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0183 
; 0000 0184 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0185 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0186 
; 0000 0187 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0188 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0189 
; 0000 018A // External Interrupt(s) initialization
; 0000 018B // INT0: Off
; 0000 018C // INT1: Off
; 0000 018D // Interrupt on any change on pins PCINT0-7: Off
; 0000 018E // Interrupt on any change on pins PCINT8-14: Off
; 0000 018F // Interrupt on any change on pins PCINT16-23: Off
; 0000 0190 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0191 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0192 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0193 
; 0000 0194 // USART initialization
; 0000 0195 // USART disabled
; 0000 0196 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0197 
; 0000 0198 // Analog Comparator initialization
; 0000 0199 // Analog Comparator: Off
; 0000 019A // The Analog Comparator's positive input is
; 0000 019B // connected to the AIN0 pin
; 0000 019C // The Analog Comparator's negative input is
; 0000 019D // connected to the AIN1 pin
; 0000 019E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 019F // Digital input buffer on AIN0: On
; 0000 01A0 // Digital input buffer on AIN1: On
; 0000 01A1 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 01A2 
; 0000 01A3 
; 0000 01A4 // ADC initialization
; 0000 01A5 // ADC Clock frequency: 1000,000 kHz
; 0000 01A6 // ADC Voltage Reference: AVCC pin
; 0000 01A7 // ADC Auto Trigger Source: ADC Stopped
; 0000 01A8 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 01A9 // ADC4: On, ADC5: On
; 0000 01AA DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01AB ADMUX=ADC_VREF_TYPE;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 01AC ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01AD ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 01AE 
; 0000 01AF // SPI initialization
; 0000 01B0 // SPI disabled
; 0000 01B1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 01B2 
; 0000 01B3 // TWI initialization
; 0000 01B4 // TWI disabled
; 0000 01B5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01B6 
; 0000 01B7 // Global enable interrupts
; 0000 01B8 TCNT0=0;    //Синхронізація таймерів
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01B9 TCNT1L=2;   //Синхронізація таймерів
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 01BA TCNT2=5;    //Синхронізація таймерів
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 01BB #asm("sei")
;PCODE: $00000255 VOL: 0
	sei
;PCODE: $00000256 VOL: 0
; 0000 01BC mode=1;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 1
; 0000 01BD sinseg_period=1;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 1
; 0000 01BE while (1)
;PCODE: $0000025B VOL: 0
; 0000 01BF       {
; 0000 01C0        // check_error(); // Перевірка на помилки (Виконується весь вільний процесорний час)
; 0000 01C1 
; 0000 01C2 
; 0000 01C3       }
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 01C4 }
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
